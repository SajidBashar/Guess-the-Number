
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.IOException;
import static java.lang.Math.random;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * -VERSION HISTORY-
*V 1.0 (2019.11.4): 1. Basic, inactive components added to environment GUI: jLabels, jSlider, jButtons, jTextArea, jSpinner
*                              2. Primitive methods inherited from initial console-based guessing game: resetGameEnvironment, GameLoop, isGuessRight, & ExitGamePromptu
*V3.0 (2019.11.7):  HELP button and EXIT button added to game, sets visibility of help screen as true or returns to main screen interface respectively 
*V4.0 (2019.11.8) : Original methods integrated into basic GUI components of environment, basic setting of game environment and gameplay now accomplishable via buttons 
*V5.0 (2019.11.9): Gameplay environment locked via setEnabled function until user chooses guess number w/ jSlider
*V6.0 (2019.11.10):  PLAY AGAIN button added to game, utilizes new method to reset game environment to revert aesthetics & game values to initial state 
*V7.0 (2019.11.11): 1. Unique record for player is created  w/ public variables added to class (Score, Date)  
*                               2. Constructor class LB instantiates player record via recalling public variables (Username, Score, Date)
*V8.0 (2019.11.12): 1. SHOW LEADERBOARD button is removed from game interface
*                               2. Leaderboard jFrame set to initialize and is set as visible when player finishes game  for comparison of player record determined in GameEnvrionment
 */
/**
 * User environment for game to be played
 * Retrieves score and date variable
 * Instantiates record for player via constructor class created in LB
 * See READ_ME file for more information on variables used 
 * @bashsaji161@granderie.ca 2019.11.18
 */
public class GameEnvironment extends javax.swing.JFrame {

    //Public score variable used to compare leaderboard records
    //Distinct score and game date assigned to specific user
    public static double GameScore;
    public static LocalDate GameDate;
    
    /**
     * Creates new form GameEnvironment
     */
    public GameEnvironment() {
        initComponents();
       
        
        //sets gameboard up so that user cannot continue unless game is played
        Results.setEditable(false);
        CheckGuess.setEnabled(false);
        RestartButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OBSELETEOBJECTNOTFOUND = new javax.swing.JProgressBar();
        RangePlaceholderText = new javax.swing.JLabel();
        Background = new javax.swing.JPanel();
        Start = new javax.swing.JButton();
        StartGamePlaceholderText = new javax.swing.JLabel();
        GuessNumberEnter = new javax.swing.JSlider();
        GuessValue = new javax.swing.JSpinner();
        RemainingGuessText = new javax.swing.JLabel();
        RangeText = new javax.swing.JLabel();
        CheckGuess = new javax.swing.JButton();
        PreviousGuesses = new javax.swing.JLabel();
        RestartButton = new javax.swing.JButton();
        AestheticLine2 = new javax.swing.JPanel();
        MainMenu = new javax.swing.JButton();
        GetHelp = new javax.swing.JButton();
        AestheticLine3 = new javax.swing.JPanel();
        ScorePlaceholderText = new javax.swing.JLabel();
        ScoreText = new javax.swing.JLabel();
        AestheticLine1 = new javax.swing.JPanel();
        Results = new javax.swing.JTextField();
        RemainingGuessPlaceholderText = new javax.swing.JLabel();
        GuessValuePlaceholderText = new javax.swing.JLabel();
        PreviousGuessesLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        RangePlaceholderText.setFont(new java.awt.Font("Goudy Old Style", 3, 20)); // NOI18N
        RangePlaceholderText.setForeground(new java.awt.Color(255, 255, 255));
        RangePlaceholderText.setText("Guess Between:");
        RangePlaceholderText.setEnabled(false);
        RangePlaceholderText.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(RangePlaceholderText, new org.netbeans.lib.awtextra.AbsoluteConstraints(514, 250, -1, -1));
        RangePlaceholderText.getAccessibleContext().setAccessibleName("RANGE");

        Background.setBackground(new java.awt.Color(51, 51, 51));
        Background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Start.setBackground(new java.awt.Color(255, 164, 63));
        Start.setFont(new java.awt.Font("Goudy Old Style", 3, 24)); // NOI18N
        Start.setForeground(new java.awt.Color(255, 255, 255));
        Start.setText("Start");
        Start.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StartMouseClicked(evt);
            }
        });
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });
        Background.add(Start, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 150, 159, -1));

        StartGamePlaceholderText.setFont(new java.awt.Font("Goudy Old Style", 3, 24)); // NOI18N
        StartGamePlaceholderText.setForeground(new java.awt.Color(255, 255, 255));
        StartGamePlaceholderText.setText("Select Your Number of Guesses");
        Background.add(StartGamePlaceholderText, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, -1, 35));

        GuessNumberEnter.setBackground(new java.awt.Color(51, 51, 51));
        GuessNumberEnter.setFont(new java.awt.Font("Goudy Old Style", 3, 18)); // NOI18N
        GuessNumberEnter.setForeground(new java.awt.Color(255, 255, 255));
        GuessNumberEnter.setMajorTickSpacing(1);
        GuessNumberEnter.setMaximum(10);
        GuessNumberEnter.setMinimum(2);
        GuessNumberEnter.setMinorTickSpacing(1);
        GuessNumberEnter.setPaintLabels(true);
        GuessNumberEnter.setPaintTicks(true);
        GuessNumberEnter.setSnapToTicks(true);
        GuessNumberEnter.setToolTipText("Use your mouse to drag the slider on a number you would like as the number of guesses!");
        GuessNumberEnter.setValue(2);
        GuessNumberEnter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GuessNumberEnterMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GuessNumberEnterMouseReleased(evt);
            }
        });
        Background.add(GuessNumberEnter, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 710, -1));

        GuessValue.setFont(new java.awt.Font("Goudy Old Style", 3, 18)); // NOI18N
        GuessValue.setModel(new javax.swing.SpinnerNumberModel(0, 0, 1000, 1));
        GuessValue.setEnabled(false);
        Background.add(GuessValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 300, 580, 26));

        RemainingGuessText.setFont(new java.awt.Font("Goudy Old Style", 3, 20)); // NOI18N
        RemainingGuessText.setForeground(new java.awt.Color(255, 255, 255));
        RemainingGuessText.setText("0");
        RemainingGuessText.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        RemainingGuessText.setEnabled(false);
        Background.add(RemainingGuessText, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 250, -1, 30));

        RangeText.setFont(new java.awt.Font("Goudy Old Style", 3, 20)); // NOI18N
        RangeText.setForeground(new java.awt.Color(255, 255, 255));
        RangeText.setText("0");
        RangeText.setEnabled(false);
        RangeText.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Background.add(RangeText, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 250, -1, -1));

        CheckGuess.setBackground(new java.awt.Color(255, 164, 63));
        CheckGuess.setFont(new java.awt.Font("Goudy Old Style", 3, 24)); // NOI18N
        CheckGuess.setForeground(new java.awt.Color(255, 255, 255));
        CheckGuess.setText("Confirm Guess");
        CheckGuess.setToolTipText("");
        CheckGuess.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CheckGuessMouseClicked(evt);
            }
        });
        CheckGuess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckGuessActionPerformed(evt);
            }
        });
        Background.add(CheckGuess, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 350, 210, 40));

        PreviousGuesses.setFont(new java.awt.Font("Goudy Old Style", 3, 20)); // NOI18N
        PreviousGuesses.setForeground(new java.awt.Color(255, 255, 255));
        PreviousGuesses.setEnabled(false);
        Background.add(PreviousGuesses, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 410, 180, 26));

        RestartButton.setBackground(new java.awt.Color(255, 164, 63));
        RestartButton.setFont(new java.awt.Font("Goudy Old Style", 1, 18)); // NOI18N
        RestartButton.setForeground(new java.awt.Color(255, 255, 255));
        RestartButton.setText("Play Again");
        RestartButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RestartButtonMouseClicked(evt);
            }
        });
        RestartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestartButtonActionPerformed(evt);
            }
        });
        Background.add(RestartButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(653, 650, -1, 30));

        AestheticLine2.setBackground(new java.awt.Color(255, 164, 63));
        AestheticLine2.setPreferredSize(new java.awt.Dimension(0, 5));
        AestheticLine2.setRequestFocusEnabled(false);

        javax.swing.GroupLayout AestheticLine2Layout = new javax.swing.GroupLayout(AestheticLine2);
        AestheticLine2.setLayout(AestheticLine2Layout);
        AestheticLine2Layout.setHorizontalGroup(
            AestheticLine2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 730, Short.MAX_VALUE)
        );
        AestheticLine2Layout.setVerticalGroup(
            AestheticLine2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        Background.add(AestheticLine2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 730, 8));

        MainMenu.setBackground(new java.awt.Color(255, 164, 63));
        MainMenu.setFont(new java.awt.Font("Goudy Old Style", 1, 18)); // NOI18N
        MainMenu.setForeground(new java.awt.Color(238, 238, 238));
        MainMenu.setText("Exit Game");
        MainMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MainMenuMouseClicked(evt);
            }
        });
        MainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainMenuActionPerformed(evt);
            }
        });
        Background.add(MainMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 650, 143, 30));

        GetHelp.setBackground(new java.awt.Color(255, 164, 63));
        GetHelp.setFont(new java.awt.Font("Goudy Old Style", 1, 18)); // NOI18N
        GetHelp.setForeground(new java.awt.Color(255, 255, 255));
        GetHelp.setText("Help");
        GetHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GetHelpMouseClicked(evt);
            }
        });
        Background.add(GetHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 650, 89, 30));

        AestheticLine3.setBackground(new java.awt.Color(255, 164, 63));
        AestheticLine3.setPreferredSize(new java.awt.Dimension(0, 5));
        AestheticLine3.setRequestFocusEnabled(false);

        javax.swing.GroupLayout AestheticLine3Layout = new javax.swing.GroupLayout(AestheticLine3);
        AestheticLine3.setLayout(AestheticLine3Layout);
        AestheticLine3Layout.setHorizontalGroup(
            AestheticLine3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 730, Short.MAX_VALUE)
        );
        AestheticLine3Layout.setVerticalGroup(
            AestheticLine3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        Background.add(AestheticLine3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 630, 730, 8));

        ScorePlaceholderText.setFont(new java.awt.Font("Goudy Old Style", 3, 24)); // NOI18N
        ScorePlaceholderText.setForeground(new java.awt.Color(255, 255, 255));
        ScorePlaceholderText.setText("SCORE:");
        ScorePlaceholderText.setEnabled(false);
        Background.add(ScorePlaceholderText, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 570, -1, 60));

        ScoreText.setFont(new java.awt.Font("Goudy Old Style", 3, 24)); // NOI18N
        ScoreText.setForeground(new java.awt.Color(255, 255, 255));
        ScoreText.setText("0");
        ScoreText.setEnabled(false);
        Background.add(ScoreText, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 570, -1, 60));

        AestheticLine1.setBackground(new java.awt.Color(255, 164, 63));
        AestheticLine1.setPreferredSize(new java.awt.Dimension(0, 5));
        AestheticLine1.setRequestFocusEnabled(false);

        javax.swing.GroupLayout AestheticLine1Layout = new javax.swing.GroupLayout(AestheticLine1);
        AestheticLine1.setLayout(AestheticLine1Layout);
        AestheticLine1Layout.setHorizontalGroup(
            AestheticLine1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 730, Short.MAX_VALUE)
        );
        AestheticLine1Layout.setVerticalGroup(
            AestheticLine1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        Background.add(AestheticLine1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 560, 730, 8));

        Results.setBackground(new java.awt.Color(67, 67, 67));
        Results.setFont(new java.awt.Font("Goudy Old Style", 3, 28)); // NOI18N
        Results.setForeground(new java.awt.Color(255, 255, 255));
        Results.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Results.setToolTipText("");
        Results.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 164, 63)));
        Results.setEnabled(false);
        Background.add(Results, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, 730, 84));

        RemainingGuessPlaceholderText.setFont(new java.awt.Font("Goudy Old Style", 3, 20)); // NOI18N
        RemainingGuessPlaceholderText.setForeground(new java.awt.Color(255, 255, 255));
        RemainingGuessPlaceholderText.setText("Guesses Remaining:");
        RemainingGuessPlaceholderText.setEnabled(false);
        RemainingGuessPlaceholderText.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Background.add(RemainingGuessPlaceholderText, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, -1, 40));

        GuessValuePlaceholderText.setFont(new java.awt.Font("Goudy Old Style", 3, 26)); // NOI18N
        GuessValuePlaceholderText.setForeground(new java.awt.Color(255, 255, 255));
        GuessValuePlaceholderText.setText("Guess:");
        GuessValuePlaceholderText.setEnabled(false);
        Background.add(GuessValuePlaceholderText, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 300, 100, 26));

        PreviousGuessesLabel.setFont(new java.awt.Font("Goudy Old Style", 1, 20)); // NOI18N
        PreviousGuessesLabel.setForeground(new java.awt.Color(255, 255, 255));
        PreviousGuessesLabel.setText("Previous Guesses:");
        PreviousGuessesLabel.setEnabled(false);
        Background.add(PreviousGuessesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, 180, 26));

        getContentPane().add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 700));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void GuessNumberEnterMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuessNumberEnterMouseReleased

    }//GEN-LAST:event_GuessNumberEnterMouseReleased

    private void GuessNumberEnterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuessNumberEnterMouseClicked

    }//GEN-LAST:event_GuessNumberEnterMouseClicked

    private void CheckGuessMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckGuessMouseClicked

    }//GEN-LAST:event_CheckGuessMouseClicked

    private void CheckGuessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckGuessActionPerformed
        theGuess = (int) (GuessValue.getValue());
        PreviousGuesses.setText(PreviousGuesses.getText() +  " " + theGuess);
        //Clears the game text shown to user 
        Results.setText("");
        //implements gameloop
        gameloop();
    }//GEN-LAST:event_CheckGuessActionPerformed

    private void MainMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainMenuMouseClicked
        //closes current jframe and returns to main menu
        dispose();
        MainScreen menu = new MainScreen();
        menu.setVisible(true);
    }//GEN-LAST:event_MainMenuMouseClicked

    private void GetHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GetHelpMouseClicked
        //opens help frame to user while in-game
        Help help = new Help();
        help.setVisible(true);
    }//GEN-LAST:event_GetHelpMouseClicked

    private void StartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StartMouseClicked

    }//GEN-LAST:event_StartMouseClicked

    private void RestartButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RestartButtonMouseClicked
        
    }//GEN-LAST:event_RestartButtonMouseClicked

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        //implements methods to initalize game based on user input of difficulty 
        resetGameEnvironment();
        EnableGame();   //enables game to user once guess choice is selected 
        System.out.println("Game Reset" + range + "," + theCount + "," + theTarget); //debug line
    }//GEN-LAST:event_StartActionPerformed

    private void RestartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestartButtonActionPerformed
        //implements method to reset components to initial state
        RestartGame();
    }//GEN-LAST:event_RestartButtonActionPerformed

    private void MainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MainMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameEnvironment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameEnvironment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameEnvironment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameEnvironment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameEnvironment().setVisible(true);
            }
        });
    }

    //variables used for basic functionality of game - see READ_ME for more information about the purpose of each variable
    int theGuess, theCount, theTarget;
    double range, GuessNumber;
    String countstring;

    void gameloop() {
        //main game method: recalls check method to verify if guess is correct to create record of user
        //if guess is correct, a local record for user is created that is displayed and can be compared to leaderboard
        theGuess = (int) (GuessValue.getValue());   //retrieves guess input
        GuessNumber++;  //increments number of guesses user has taken until correct guess is achieved 
        theCount--; //decrements number of guesses available for user
        
        if (isGuessRight(theGuess, theTarget)) {
            Results.setForeground(Color.green);
            Results.setText("You won! Great job " + UsernameSubmit.Username + "! It took you " + (int) (GuessNumber) + " turn(s)!");
            GuessValue.setEnabled(false);
            CheckGuess.setEnabled(false);
            RemainingGuessText.setText(String.valueOf(theCount));
            RemainingGuessText.setForeground(new Color (255,164,63));
            ScoreText.setForeground(new Color (255,164,63));
            
            CalculateScore();   //calculates score
            Time(); //calculates time
            ShowLeaderboard(); //automatically shows leaderboard to user 
            
            //player allowed to continue to see leaderboard
             RestartButton.setEnabled(true);
        }
        //if guess ! correct, user shown the correct number & offered to play again
        else if (theCount == 0) {
            Results.setText("Oh-no you lost " + UsernameSubmit.Username  + "! The correct number was " + theTarget + "!");
            Results.setForeground(Color.red);
            RemainingGuessText.setText(String.valueOf(theCount));
            RemainingGuessText.setForeground(Color.red);
            GuessValue.setEnabled(false);
            CheckGuess.setEnabled(false);
            RestartButton.setEnabled(true);
        }

    }

    boolean isGuessRight(int guess, int target) {
        //flag to check whether guess input from user is correct 
        if (guess > target) {
            Results.setText("Your guess is too high! Try again!");
            RemainingGuessText.setText(String.valueOf(theCount));
        }
        if (guess < target) {
            Results.setText("Your guess is too low! Try again! ");
            RemainingGuessText.setText(String.valueOf(theCount));
        }
        return (guess == target);   //return winning condition for game 
    }

    void Time() {
        //uses local date of system to create timestamp for user if game is won
        //alters public variable
        GameDate = LocalDate.now();
    }

    void resetGameEnvironment() {
        //initializes game environmennt 
        theCount = GuessNumberEnter.getValue(); //retrieves value of user's desired frame of guesses 
        RemainingGuessText.setText(String.valueOf(theCount));   //displays user's choice of guesses
        
        //switch structure used to set range that random number can be set between
        //based on user's choice of number of guesses between 1-10
        switch (theCount) {
            case 2:
                range = 5;
                break;
            case 3:
                range = 10;
                break;
            case 4:
                range = 20;
                break;
            case 5:
                range = 25;
                break;
            case 6:
                range = 40;
                break;
            case 7:
                range = 60;
                break;
            case 8:
                range = 100;
                break;
            case 9:
                range = 150;
                break;
            case 10:
                range = 200;
                break;
            default:
                range = 200;
                break;
        }
        double theNumber = random();    //random number generated used to determine number needed to win game
        theTarget = (int) (theNumber * range) + 1; //sets target for user via random number created within range
        int Rangeinttext = (int)range;  //used to display integer of range - used for user aesthetic purposes
        RangeText.setText("1 - " + String.valueOf(Rangeinttext)); //displays range to user
    }

    void CalculateScore() {
        //calculates final score of user after game is won
        //only initalized IF user has won game 
        GameScore = ((theCount+1) * (range / GuessNumber)) *100;
        ScoreText.setText(String.valueOf(GameScore));   //displays score to user 
    }

    void EnableGame() {
        //enables game 
        //sets disabled components as enabled
        RangePlaceholderText.setEnabled(true);
        RemainingGuessPlaceholderText.setEnabled(true);
        RemainingGuessText.setEnabled(true);
        PreviousGuesses.setEnabled(true);
        PreviousGuessesLabel.setEnabled(true);
        GuessValuePlaceholderText.setEnabled(true);
        RangeText.setEnabled(true);
        GuessValue.setEnabled(true);
        Results.setEnabled(true);
        ScorePlaceholderText.setEnabled(true);
        ScoreText.setEnabled(true);
        CheckGuess.setEnabled(true);
        GuessNumberEnter.setEnabled(false);
        Start.setEnabled(false);
        StartGamePlaceholderText.setEnabled(false);
    }

    void RestartGame() {
        //sets game back to inital state by reseting components
        RangePlaceholderText.setEnabled(false);
        RemainingGuessPlaceholderText.setEnabled(false);
        RemainingGuessText.setEnabled(false);
        PreviousGuesses.setEnabled(false);
        PreviousGuessesLabel.setEnabled(false);
        RangeText.setEnabled(false);
        GuessValuePlaceholderText.setEnabled(false);
        GuessValue.setEnabled(false);
        Results.setEnabled(false);
        ScorePlaceholderText.setEnabled(false);
        ScoreText.setEnabled(false);
        RestartButton.setEnabled(false);
        CheckGuess.setEnabled(false);
        GuessNumberEnter.setEnabled(true);
        Start.setEnabled(true);
        StartGamePlaceholderText.setEnabled(true);
        ScoreText.setText("0");
        RemainingGuessText.setText("0");
        RangeText.setText("0");
        Results.setText("");
        GuessNumberEnter.setValue(2);
        GuessValue.setValue(0);
        range=0;
        theGuess=0;
        theCount=0;
        theTarget =0;
        GameScore = 0;
        GuessNumber=0;
        GameDate = null;
        RemainingGuessText.setForeground(Color.white);
        ScoreText.setForeground(Color.white);
        PreviousGuesses.setText("");
    }


    void ShowLeaderboard(){
        //Closes game environment form and opens leaderboard form
        //catchs file exception - if file not found
        Leaderboard lb;
        try {
            lb = new Leaderboard();
            lb.setVisible(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GameEnvironment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GameEnvironment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GameEnvironment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AestheticLine1;
    private javax.swing.JPanel AestheticLine2;
    private javax.swing.JPanel AestheticLine3;
    private javax.swing.JPanel Background;
    private javax.swing.JButton CheckGuess;
    private javax.swing.JButton GetHelp;
    private javax.swing.JSlider GuessNumberEnter;
    private javax.swing.JSpinner GuessValue;
    private javax.swing.JLabel GuessValuePlaceholderText;
    private javax.swing.JButton MainMenu;
    private javax.swing.JProgressBar OBSELETEOBJECTNOTFOUND;
    private javax.swing.JLabel PreviousGuesses;
    private javax.swing.JLabel PreviousGuessesLabel;
    private javax.swing.JLabel RangePlaceholderText;
    private javax.swing.JLabel RangeText;
    private javax.swing.JLabel RemainingGuessPlaceholderText;
    private javax.swing.JLabel RemainingGuessText;
    private javax.swing.JButton RestartButton;
    private javax.swing.JTextField Results;
    private javax.swing.JLabel ScorePlaceholderText;
    private javax.swing.JLabel ScoreText;
    private javax.swing.JButton Start;
    private javax.swing.JLabel StartGamePlaceholderText;
    // End of variables declaration//GEN-END:variables
}
